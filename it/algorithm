Hamming distance: number of positions with different characters between two words
Levenshtein distance: minimum number of single-character edits between two words (delete/replace/insert)

Dynamic programming
Bellman equation

#NP-complete problems
Knapsack problem: items with weight and value, select items with maximum value not exceeding weight limit
Travelling salesman problem: points with pair distances, find shortest route visiting each point exactly once

#Optimal stopping: choose time to take action
Secretary problem: select best applicant, immediate decision to accept/reject, distribution unknown
- cutoff rule (37%): first look and do not accept (1/e time), then accept first so-far-best applicant
- ignores cost of time
- ignores delayed decision
- ignores rejection by applicant
Known distribution: cutoff is not needed, we can accept immediatelly (no looking phase)
- threshold rule: accept applicant over threshold, threshold decreases in time
Time discounting: unlimited offers, same offer later has additional cost
Burglar problem: retire or continue after robbery, risk of failure

Space–time tradeoff: increased data stored versus increased time

#Explore-exploit tradeoff: best option vs new option, optimal lifetime strategy
- discounted future reward
- ignores cost of switching
Upper confidence bound: choose highest possible reward
Multi-armed bandit: multiple choices, unknown success rate, maximize reward
Gittins index: switch to highest expected reward, recalculate after result
A/B tests

#Cache: small fast data storage
Hit: data found in cache
Miss: data not found in cache
Eviction policy
- FIFO: replaced old data, problem - removes still useful data
- LFU (least frequently used): problem - keeps no longer useful data
- LRU (least recently used): replaces unused data, common

#Scheduling: jobs with processing time, priority (weight) and deadline
Priority inversion: high priority job blocked by low priority job
- Priority inheritance: blocking job inherits priority of blocked job
Context switch: cost of switching between jobs
- Thrashing: performance collapse when context switching takes most of time
Variants
- Single-machine scheduling
- Identical-machines scheduling
Algorithms
- Earliest deadline first (EDF): minimize maximum lateness
- Earliest due date (EDD): same as EDF
- Moore-Hodgson algorithm: minimize number of late tasks, EDD + skipping longest past due tasks
- minimize weighted completion time is NP-complete with more machines (Knapsack problem)
- Shortest job next: minimize waiting + processing time
- First come, first served (FCFS): job queue
- Round-robin: fixed time per job, cycle jobs

#Relaxation: approximation of difficult problem
Constraint relaxation: constraint removal
Continuous relaxation: codefinitionntinuous instead of discrete variables
Lagrangian relaxation: violations penalization

#Complexity
ZPP ⊆ RP ⊆ BPP ⊆ PP
PP: probabilistic Turing machine in polynomial time

#Randomness
Monte Carlo algorithm: repeated random sampling, e.g. π value estimation
- Fermat primality test: check if number is prime, a^(p-1) = 1 mod p
- Miller–Rabin primality test: check if number is prime
- complexity class BPP: bounded error both-sides
- complexity class RP: bounded error one-side, no error second-side
Las Vegas algorithm: gives correct result or indicates failure
- complexity class ZPP: expected polynomial time on average
- can be converted to Monte Carlo by giving random answer after X attempts
Bloom filter
- test presence of element in set
- gives false positives but needs less space
- multiple hash functions mapping to small range
- for every hash function remember which values were reached
- do not remember results for any specific value
- test element by checking if all values were reached already

Interrupt coalescing: events to be process are held until certain amount or timeout reached
Polling: actively sampling status of asynchronous activity

#Game theory
Nash equilibrium: solution of non-cooperative game
Focal point / Schelling point: default solution without communication in cooperation game
Zero-sum game: advantage for one side is equivalent to loss for other side
- examples: chess, poker, options
Stag hunt: non-zero-sum, safety vs cooperation, hunt stag (cooperate) or hare (alone)
- two agents, choose to cooperate independently
- best result for both, if both cooperate
- good result for both, if both do not cooperate
- good result for one and bad for the other, if only one cooperates
- two equilibria, best strategy is to choose the same
Prisoner's dilemma: non-zero-sum, individual vs collective, be silent or betray
- two agents, choose to cooperate independently
- good result for both, if both cooperate
- bad result for both, if both do not cooperate
- best result for one and worst result for other, if only one cooperates
- best strategy in single game is to not cooperate
- good strategy in repeated game is to repeat opponent's previous action
Revelation principle: if choice function can be implemented by non-truthful mechanism then it can be implemented by truthful mechanism
- e.g. Sealed-bid versus Vickrey auction
Incentive compatibility: every actor gets best outcome by acting truthfully
Auction
- English auction: opening bid is minimum and increases
- Dutch auction: opening bid is maximum and decreases
- Sealed-bid: everyone bids, highest wins
- Vickrey auction: everyone bids, highest wins but pays second-highest bid

#Heuristics
Greedy algorithm: produces local maximum, selects best option at each step

#Distributed computing
Byzantine generals problem: consensus with unreliable actors
- all generals have to agree on attack but messengers can fail
- proof of work: in blockchains, tasks difficult to do but easy to verify
- proof of stake: in blockchains, pledge assets to validate, more energy efficient than proof of work

#Computation
Recursion: base case and recursive step, function calling itself

Halting problem: whether program will stop, undecidable
Turing machine: abstract computer, memory tape with discrete cells, finite set of symbols, head reads/writes and moves

#Global maximum
Optimization
- Hill climbing: iterative search for local maximum
- Shotgun hill climbing: random restarts (to find better local maximum)
Randomization
- Simulated annealing: iterative, jump to random place or stay, probability of jump depends on values and decreases with time

#Networking: avoid congestion in traffic
Exponential backoff: waiting after failure grows exponentially
Additive increase/multiplicative decrease (AIMD): slowing down quickly
Backchannel: feedback provided to control flow, prevents buffer overflow
